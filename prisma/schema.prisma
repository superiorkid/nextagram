// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  fullName      String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          Role      @default(USER)
  private       Boolean   @default(false)
  image         String?
  website       String?
  bio           String?   @db.Text
  gender        Gender?

  accounts       Account[]
  posts          Post[]
  likedPosts     Likes[]
  commentedPosts Comments[]
  followers      Follows[]      @relation("following")
  following      Follows[]      @relation("follower")
  commentLikes   CommentLikes[]
  stories        Stories[]
  storyViews     StoryViews[]

  @@unique([name, email])
}

model Post {
  id        String   @id @default(cuid())
  caption   String
  location  String?
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String?

  likedByUsers     Likes[]
  commentedByUsers Comments[]
}

model Stories {
  id         String       @id @default(cuid())
  authorId   String
  media_url  String
  postedAt   DateTime     @default(now())
  expiresAt  DateTime     @default(dbgenerated("NOW() + interval '1 DAYS'"))
  caption    String?
  storyViews StoryViews[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model StoryViews {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  stories   Stories @relation(fields: [storiesId], references: [id])
  storiesId String

  @@id([userId, storiesId])
}

model Image {
  id         String   @id @default(cuid())
  name       String   @unique
  path       String
  uploadedAt DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
}

model Likes {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model CommentLikes {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comments @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([userId, commentId])
}

model Comments {
  id            String         @id @default(cuid())
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  content       String
  postedAt      DateTime       @default(now())
  lastUpdatedAt DateTime       @updatedAt
  commentLikes  CommentLikes[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}
